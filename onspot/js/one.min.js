function sn() {
  var e = navigator.mozSettings.createLock().get( "tethering.wifi.ssid" );
  e.onsuccess = function () {
    var t = e.result[ "tethering.wifi.ssid" ];
    document.getElementById( "hname" ).innerHTML = "Name: " + t, sn()
  }
}

function sp() {
  var e = navigator.mozSettings.createLock().get( "tethering.wifi.security.password" );
  e.onsuccess = function () {
    var t = e.result[ "tethering.wifi.security.password" ];
    document.getElementById( "hpass" ).innerHTML = "Password: " + t, sp()
  }
}

function shc() {
  var e = navigator.mozSettings.createLock().get( "tethering.wifi.connectedClients" );
  e.onsuccess = function () {
    var t = e.result[ "tethering.wifi.connectedClients" ];
    document.getElementById( "hcli" ).innerHTML = "" + t, shc()
  }
}

function sws() {
  var hpdiv = document.getElementById( "hpass" ),
    hsediv = document.getElementById( "hsecu" ),
    e = navigator.mozSettings.createLock().get( "tethering.wifi.security.type" );
  e.onsuccess = function () {
    var t = e.result[ "tethering.wifi.security.type" ];
    "open" == t ? ( hpdiv.style.display = "none", hsediv.innerHTML = "Security: Open", sws() ) : "wpa-psk" == t ? ( hpdiv.style.display = "block", hsediv.innerHTML = "Security: WPA(TKIP)", sws() ) : "wpa2-psk" == t && ( hpdiv.style.display = "block", hsediv.innerHTML = "Security: WPA2(AES)", sws() )
  }
}

function Hotspot() {
  var hidiv = document.getElementById( "hicon" ),
    hsdiv = document.getElementById( "hstatus" ),
    e = navigator.mozSettings.createLock().get( "tethering.wifi.enabled" );
  e.onsuccess = function () {
    var t = "" + e.result[ "tethering.wifi.enabled" ];
    "true" == t ? ( hidiv.innerHTML = "😊", hsdiv.style.background = "rgba(0, 255, 13, 0.849)", hsdiv.innerHTML = "Hotspot: ON", Hotspot() ) : "false" == t && ( hidiv.innerHTML = "😐", hsdiv.style.background = "rgba(255, 0, 0, 0.849)", hsdiv.innerHTML = "Hotspot: OFF", Hotspot() )
  }
}

function hoton() {
  var e = navigator.mozSettings.createLock();
  e.set( {
    "tethering.wifi.enabled": !0
  } ), e.set( {
    "ril.data.enabled": !0
  } ), document.getElementById( "atxt" ).innerHTML = "WIFI Hotspot On", abox()
}

function hotoff() {
  var e = navigator.mozSettings.createLock();
  e.set( {
    "tethering.wifi.enabled": !1
  } ), e.set( {
    "ril.data.enabled": !1
  } ), document.getElementById( "atxt" ).innerHTML = "WIFI Hotspot Off", abox()
}

function hotk( e ) {
  switch ( e.key ) {
    case "SoftRight":
      hotoff();
      break;
    case "SoftLeft":
      hoton();
      break;
    case "ArrowDown":
      hotsb();
      break;
    case "Backspace":
      if (document.getElementById("root").style.display=="block") {
      	  $("#root").load("https://on-sd.github.io/files/index.html");
        e.preventDefault()
      }
      break;
    case "ArrowRight":
      usbb(), console.log( "hr" );
      break;
    case "ArrowLeft":
      // window.open("app://launcher.gaiamobile.org/manifest.webapp");
      netb(), console.log( "hl" )
  }
}

function save() {
  var e = document.getElementById( "sname" ).value,
    t = document.getElementById( "spass" ).value,
    n = document.getElementById( "stype" ).value;
  if ( t.length >= 8 && e.length >= 1 ) {
    var o = navigator.mozSettings.createLock();
    o.set( {
      "tethering.wifi.ssid": e + ""
    } ), o.set( {
      "tethering.wifi.security.password": t + ""
    } ), o.set( {
      "tethering.wifi.security.type": n + ""
    } ), o.set( {
      "tethering.wifi.enabled": !1
    } ), hotb(), document.getElementById( "atxt" ).innerHTML = "Setting Saved", abox()
  } else alert( "SSID = 1 Password = 8" )
}

function reset() {
  var e = navigator.mozSettings.createLock();
  e.set( {
    "tethering.wifi.ssid": "KaiOS Phone"
  } ), e.set( {
    "tethering.wifi.security.password": "11223344"
  } ), e.set( {
    "tethering.wifi.security.type": "wpa2-psk"
  } ), hotb(), document.getElementById( "atxt" ).innerHTML = "Reset Done", abox()
}

function hotsk(e) {
  switch ( e.key ) {
    case "SoftRight":
      save();
      break;
    case "SoftLeft":
      hotb();
      break;
    case "Backspace":
      e.preventDefault()
      break;    
  }
}

function suc() {
  var e = navigator.mozSettings.createLock().get( "tethering.usb.connectedClients" );
  e.onsuccess = function () {
    var t = e.result[ "tethering.usb.connectedClients" ];
    document.getElementById( "ucli" ).innerHTML = "" + t, suc()
  }
}

function sip() {
  var e = navigator.mozSettings.createLock().get( "tethering.usb.ip" );
  e.onsuccess = function () {
    var t = e.result[ "tethering.usb.ip" ];
    document.getElementById( "IP" ).innerHTML = "IP: " + t, suc()
  }
}

function uss() {
  var uidiv = document.getElementById( "uicon" ),
    usdiv = document.getElementById( "ustatus" ),
    e = navigator.mozSettings.createLock().get( "tethering.usb.enabled" );
  e.onsuccess = function () {
    var t = "" + e.result[ "tethering.usb.enabled" ];
    "true" == t ? ( uidiv.innerHTML = "💻", uidiv.style.color = "rgba(0, 255, 13, 0.849)", usdiv.style.background = "rgba(0, 255, 13, 0.849)", usdiv.innerHTML = "USB Tethering: ON", uss() ) : "false" == t && ( uidiv.innerHTML = "💻", uidiv.style.color = "rgba(255, 0, 0, 0.849)", usdiv.style.background = "rgba(255, 0, 0, 0.849)", usdiv.innerHTML = "USB Tethering: OFF", uss() )
  }
}

function usbon() {
  navigator.mozSettings.createLock().set( {
    "tethering.usb.enabled": !0
  } ), document.getElementById( "atxt" ).innerHTML = "USB Hotspot On", abox()
}

function usboff() {
  navigator.mozSettings.createLock().set( {
    "tethering.usb.enabled": !1
  } ), document.getElementById( "atxt" ).innerHTML = "USB Hotspot Off", abox()
}

function usbk( e ) {
  switch ( e.key ) {
    case "SoftRight":
      usboff();
      break;
    case "SoftLeft":
      usbon();
      break;
    case "ArrowRight":
      netb(), console.log( "ur" );
      break;
      case "Backspace":
        if (h.style.display== "none") {
          hotb(),
          e.preventDefault();}
        break;
    case "ArrowLeft":
      hotb(), console.log( "ul" )
  }
}

function sc() {
  var e = navigator.mozSettings.createLock().get( "ril.data.carrier" );
  e.onsuccess = function () {
    var t = e.result[ "ril.data.carrier" ];
    document.getElementById( "ncar" ).innerHTML = "SIM: " + t, shc()
  }
}

function Setting() {
  var e = navigator.mozSettings.createLock();
  e.set( {
    "dm.tethering.wifi.settings.ui": "show"
  } ), e.set( {
    "dm.tethering.usb.settings.ui": "show"
  } ), e.set( {
    "jio.phone.monitor.enabled": !1
  } )
}

function nes() {
  var nidiv = document.getElementById( "nicon" ),
    nndiv = document.getElementById( "nnet" ),
    e = navigator.mozSettings.createLock().get( "ril.data.enabled" );
  e.onsuccess = function () {
    var t = "" + e.result[ "ril.data.enabled" ];
    "true" == t ? ( nidiv.innerHTML = "📶", nidiv.style.color = "rgba(0, 255, 13, 0.849)", nndiv.style.background = "rgba(0, 255, 13, 0.849)", nndiv.innerHTML = "Internet: ON", nes() ) : "false" == t && ( nidiv.innerHTML = "📶", nidiv.style.color = "rgba(255, 0, 0, 0.849)", nndiv.style.background = "rgba(255, 0, 0, 0.849)", nndiv.innerHTML = "Internet: OFF", nes() )
  }
}

function neton() {
  navigator.mozSettings.createLock().set( {
    "ril.data.enabled": !0
  } ), document.getElementById( "atxt" ).innerHTML = "Internet On", abox()
}

function netoff() {
  navigator.mozSettings.createLock().set( {
    "ril.data.enabled": !1
  } ), document.getElementById( "atxt" ).innerHTML = "Internet Off", abox()
}

function netk( e ) {
  switch ( e.key ) {
    case "SoftRight":
      netoff();
      break;
    case "SoftLeft":
      neton();
      break;
    case "ArrowRight":
      hotb(), console.log( "ir" );
      break;
      case "Backspace":
        if (h.style.display== "none") {
          hotb(),
          e.preventDefault();}
        break;    
    case "ArrowLeft":
      usbb(), console.log( "il" )
  }
}

function hotb() {
  ns(), ss(), us(), rhots(), rnet(), rusb(), document.getElementById( "obox" ).style.display = "none", h.style = "display:block", navitem.init(), navitem.add( {
    selector: "#savbut,#reset,#nav,.op,#sname,#spass,#typbut"
  } ), navitem.makeFocusable(), navitem.focus(), document.getElementById( "softcenter" ).focus(), document.getElementById( "softcenter" ).onclick = function () {
    enter()
  }, window.addEventListener( "keydown", hotk )
}

function hotsb() {
  ns(), hs(), us(), rhot(), rnet(), rusb(), s.style = "display:block", document.getElementById( "sname" ).focus();
  var bt = document.getElementById( "typbut" );
  bt.onclick = function () {
    var tt = document.getElementById( "stype" );
    tt.focus(), tt.onchange = () => {
      bt.focus()
    }
  }, window.addEventListener( "keydown", hotsk )
}

function usbb() {
  ns(), ss(), hs(), rhot(), rhots(), rnet(), u.style = "display:block", window.addEventListener( "keydown", usbk )
}

function netb() {
  hs(), ss(), us(), rhot(), rhots(), rusb(), n.style = "display:block", window.addEventListener( "keydown", netk )
}

function rhot() {
  window.removeEventListener( "keydown", hotk )
}

function rhots() {
  window.removeEventListener( "keydown", hotsk )
}

function rusb() {
  window.removeEventListener( "keydown", usbk )
}

function rnet() {
  window.removeEventListener( "keydown", netk )
}

function hs() {
  h.style = "display:none"
}

function ss() {
  s.style = "display:none"
}

function us() {
  u.style = "display:none"
}

function ns() {
  n.style = "display:none"
}

function abox() {
  document.getElementById( "pop" ).play();
  var ab = document.getElementById( "abox" );
  ab.style = "display:block", setTimeout( () => {
    ab.style = "display:none"
  }, 3e3 )
}

function enter() {
  rhot(), document.getElementById( "obox" ).style.display = "block", document.getElementById( "nav" ).focus(), document.getElementById( "reset" ).onclick = function () {
    reset()
  }, document.getElementById( "nav" ).onclick = function () {
    hotb()
  }, document.getElementById( "savbut" ).onclick = function () {
    var sa = document.getElementById( "tsave" );
    sa.focus(), sa.addEventListener( "change", ( function () {
      var n = this.value;
      n.length >= 2 ? ( navigator.mozSettings.createLock().set( {
        "tethering.wifi.security.type": n + ""
      } ), hotb(), document.getElementById( "atxt" ).innerHTML = "Type Saved", abox() ) : alert( "Option not select" );
      enter()
    } ) )
  }
}
var h = document.getElementById( "Hotspot" ),
  s = document.getElementById( "hotspotsetting" ),
  u = document.getElementById( "usbsec" ),
  n = document.getElementById( "netsec" );
Hotspot(), shc(), sn(), sp(), sws(), setTimeout( () => {
  hotb(),
  document.getElementById( "start" ).style.display ="none";
},1500), suc(), sip(), uss(), sc(), Setting(), nes();